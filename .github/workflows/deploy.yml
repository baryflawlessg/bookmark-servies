name: Build and Deploy BookVerse

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: bookverse
  DOCKER_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
        docker tag ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} ${{ env.DOCKER_IMAGE }}:latest
        docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > bookverse-image.tar.gz

    - name: Upload Docker image to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "bookverse-image.tar.gz"
        target: "/tmp/"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Stop existing container
          docker stop bookverse-app || true
          docker rm bookverse-app || true
          
          # Remove old image
          docker rmi bookverse:latest || true
          
          # Load the new image
          docker load < /tmp/bookverse-image.tar.gz
          
                     # Create application directory if it doesn't exist
           sudo mkdir -p /opt/bookverse
           sudo chown ec2-user:ec2-user /opt/bookverse
           
           # Copy docker-compose.yml
           sudo tee /opt/bookverse/docker-compose.yml > /dev/null << 'EOF'
           services:
             bookverse:
               image: bookverse:latest
               container_name: bookverse-app
               ports:
                 - "8080:8080"
               environment:
                 - SPRING_PROFILES_ACTIVE=prod
               restart: unless-stopped
               healthcheck:
                 test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
                 interval: 30s
                 timeout: 10s
                 retries: 3
           EOF
           
           # Change to application directory
           cd /opt/bookverse
           
           # Start the application
           docker-compose up -d
           
           # Wait for application to be ready (longer wait)
           sleep 60
           
           # Check if application is running (with retries)
           for i in {1..5}; do
             if curl -f http://localhost:8080/api/health; then
               echo "Application is healthy!"
               break
             else
               echo "Attempt $i: Application not ready yet, waiting..."
               sleep 30
             fi
           done
           
           # Final health check
           curl -f http://localhost:8080/api/health || exit 1
          
          echo "Deployment completed successfully!"

         - name: Health Check
       run: |
         sleep 30
         for i in {1..3}; do
           if curl -f http://${{ secrets.EC2_HOST }}:8080/api/health; then
             echo "External health check successful!"
             exit 0
           else
             echo "Attempt $i: External health check failed, retrying..."
             sleep 30
           fi
         done
         echo "External health check failed after 3 attempts"
         exit 1
